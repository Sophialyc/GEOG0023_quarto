---
title: "Week 5"
---

<div style="text-align: justify">

## Summary of Lecture 5

### Basics of Google Earth Engine (GEE)

Google Earth Engine (GEE) is a cloud-based geospatial processing platform that uses **Javascript**. It was introduced in 2010 by Google, allow users to conduct geospatial analysis at scale, which includes access to a large warehouse of satellite imagery and the prompt computational power needed to analyze those images. Below shows a comprehensive navigation guide to different tabs of the GEE layout.

```{r echo=FALSE,cache=FALSE, fig.align='center', fig.cap="GEE layout. Source:https://ourcodingclub.github.io/tutorials/earth-engine/"}
knitr::include_graphics('https://ourcodingclub.github.io/assets/img/tutorials/earth-engine/gee_layout.png')
```

Codes that run on the browser is called the **Client Side,** while codes that run on the server where data is stored is called **Server Side.** I think it is very useful to get to know more about the Java script style, including the data types, Earth Engine Objects (ee.object), and functional programming like For loop on the official [Google Earth Engine Guide](https://developers.google.com/earth-engine/tutorials/tutorial_js_02). During the lecture, it was specially mentioned that a loop is not possible to execute over the contents of an ee. ImageCollection because it is on the server side. Instead, a better option would be using the **map()** throughcreating a function that can be independently applied to each element. The figure below illustrates a simplified example of how map() would be better than for-loops in. GEE.

```{r echo=FALSE,cache=FALSE, fig.align='center'}
knitr::include_graphics('figures/week5_1.png')

```

## Application

### Melbourne in GEE

I used Melbourne for this practical. I downloaded the GADM boundary for Australia from [GADM](https://gadm.org/). The original intention was to select Tasmania, however, the available imagery for the location is very limited, I adjusted several filters including the date and cloud cover to include larger range of imagery in the area:

{\< .filterDate('2017-01-01', '2022-10-10')\>} {\< .filter(ee.Filter.lt("CLOUD_COVER", 0.5));}

```{r echo=FALSE,cache=FALSE, fig.align='center', fig.cap='Tasmania'}
knitr::include_graphics('figures/week5_3.gif')

```

However, the imagery shown are not sufficient, the screenshot below shows the coverage for Tasmania was not complete. Hence, I have selected other locations with more complete coverage of imagery. I found Melbourne with fulle coverage image, hence I chose it as the city for exploration in GEE. The figure below shows the True Colour Image that is clipped to SA boundary.

```{r echo=FALSE, cache=FALSE, fig.align='center', out.width="100%", fig.cap='True COlour Image of South Australia'}
knitr::include_graphics('figures/week5_tci.png')
```

I have mosaiced the image collection, and with the overlapping pixels, I took the mean to create less obvious demarcation of image overlap. Then, I clip it back with Melbourne boundary.

```{r echo=FALSE, cache=FALSE, fig.align='center', out.width="100%", fig.cap='Mosaicking and Clipping of images from South Australia'}
knitr::include_graphics('figures/week5_4.gif')

```

### Texture analysis of Melbourne

GEE has several methods to estimate spatial texture, `image.entropy()` can be used when the image is discrete valued to compute the entropy in a neighbourhood. Other than that, another method is a familiar method with gray-level co-occurrence matrix (GLCM). `glcmTexture()` however works with integer value, hence, the value in surface refectance will be converted to integers, which is 1 and 0 in this case, as shown in the histogram below. The range is too subtly small. therefore, it has to be multiplied so the texture can be computed with the following codes.

```{javascript eval=FALSE}
var glcm = clip.select(['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7])
  .multiply(1000)
  .toUint16()
  .glcmTexture({size: 1})
  .select('SR_.._contrast|SR_.._diss')
  .addBands(clip);
```

```{r echo=FALSE, cache=FALSE, out.width="100%", fig.align='center', fig.cap="7 bands'pixel value"}
knitr::include_graphics('figures/week5_ee-chart.png')
```

The GLCM considers spatial relationships of pixels in an image, I used the statistics of contrast GLCM for Melbourne, measuring the local variations in the gray-level co-occurrence matrix. The lower contrast areas(dark purple to black) are mainly natural environment and forestry, while the high contrast area (pink to light purple) are urban areas, such as settlements, urban structures. There is a comparison below between the glcm map and the tci image.

```{r echo=FALSE, cache=FALSE, out.width="100%", fig.align='center', fig.cap="Contrast GLCM"}
knitr::include_graphics('figures/week5_glcm.2.png')

```

### PCA analysis of Melbourne

Principle Component analysis(PCA) transforms the original vector image data into smaller set of uncorrelated variables such, allowing the identification of standards in data and their expression to emphasise the similarities and differences [@santo2012]. From the 21 element of the PCA analysis, the first 4 components are shown as they explain for cumulative **98.68%** of total variance within the whole image collection. The variation captured in Melbourne is quite obvious as the different land use tend to form a cluster, the urban areas are located around the coast while the inner regions are mostly natural environment with less significant clusters of settlements.

```{r echo=FALSE, cache=FALSE, out.width="100%", fig.align='center', fig.cap="PCA "}
knitr::include_graphics('figures/week5_pc1-4.gif')
```

### Band math in GEE

GEE also supports band math generation, I have illustrated with **Normalized Difference Vegetation Index(NDVI)** and **Normalized Difference Water Index** **(NDWI)** with simple lines of code.

```{javascript eval=FALSE}
//NDVI
var NDVI_1 = clip.select('SR_B5').subtract(clip.select('SR_B4'))
  .divide(clip.select('SR_B5').add(clip.select('SR_B4')));

Map.addLayer(NDVI_1, { min: -1, max: 1, palette: ['blue', 'white', 'green']}, 'NDVI');
```

```{r echo=FALSE, cache=FALSE, out.width="100%", fig.cap="NDVI of Melbourne"}
knitr::include_graphics('figures/week5_ndvi.png')
```

```{javascript eval=FALSE}
//NDWI
var NDWI = clip.select('SR_B3').subtract(clip.select('SR_B5'))
  .divide(clip.select('SR_B3').add(clip.select('SR_B5')));

Map.addLayer(NDWI, { min: -1, max: 1, palette: ['blue', 'white', 'green']}, 'NDWI');
```

```{r echo=FALSE, cache=FALSE, out.width="100%", fig.cap="NDWI of Melbourne"}
knitr::include_graphics('figures/week5_NDWI.png')
```

## Reflection

GEE is very new and interesting to me, I am surprised of the capability of GEE in remote sensing. Other than the confusion with JavaScript, I think GEE in general is a very useful tool for carrying out large scale geospatial analysis. In this practical, I got to explore Melbourne by creating various parameters such as texture, PCA and band maths. I think that the GEE window is sometimes hard to navigate because if there is a variable viewer automatically, and rather than requiring users to use `print()` function to write in console. With a variable viewer, it would be more convenient and easily understandable about what I have created because I sometimes get confused about how to interpret the maps and want to go back to check values of the layer. Also, I am still figuring out a way to create legend to collate for interpretations on maps.

In general, I think GEE is a pragmatic tool but perhaps the errors could be more comprehendible for users to debug. I do think that the large dataset available on a cloud-based platform is awesome and I really like the **"Google Earth Timelapse"** on GEE. I saw the timelapse displaying the urban growth in Naypytaw, Myanmar from 1984 to 2020 is simply amazing.
